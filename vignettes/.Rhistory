for(i in 1:12){
drug <- ALLRES[i]$drug
dset <- ALLRES[i]$dataset
arm <- ALLRES[i]$armcol
if(dset == "PRISM"){
mat <- prsm_new
}else if(dset == "CTRP"){
mat <- ctrp_new
}else if(dset == "GDSC"){
mat <- gdsc_new2
}
common_samples <- intersect(colnames(chrarm_data),colnames(mat))
dd <- na.omit(cbind(chrarm_data[arm,common_samples],mat[drug,common_samples]))
ldat<-list(
loss=dd[which(dd[,1] <= -0.3),2],
neutr=dd[intersect(which(dd[,1] > -0.3),which(dd[,1] < 0.3)),2],
gain=dd[which(dd[,1] >= 0.3),2])
kt <- kruskal.test(ldat)
vioplot(ldat,las=1)
mtext(side=3,paste(dset,drug,arm,sep="::"))
legend("topleft",sprintf("%.2e",kt$p.value) )
#plot(dd[,1],dd[,2],xlab="10q_CNV",ylab="response")
}
for(i in 1:12){
drug <- ALLRES[i]$drug
dset <- ALLRES[i]$dataset
arm <- ALLRES[i]$armcol
if(dset == "PRISM"){
mat <- prsm_new
}else if(dset == "CTRP"){
mat <- ctrp_new
}else if(dset == "GDSC"){
mat <- gdsc_new2
}
common_samples <- intersect(colnames(chrarm_data),colnames(mat))
dd <- na.omit(cbind(chrarm_data[arm,common_samples],mat[drug,common_samples]))
ldat<-list(
loss=dd[which(dd[,1] <= -0.3),2],
neutr=dd[intersect(which(dd[,1] > -0.3),which(dd[,1] < 0.3)),2],
gain=dd[which(dd[,1] >= 0.3),2])
kt <- kruskal.test(ldat)
vioplot(ldat,las=1)
mtext(side=3,paste(dset,drug,arm,sep="::"))
legend("bottomleft",sprintf("%.2e",kt$p.value) )
#plot(dd[,1],dd[,2],xlab="10q_CNV",ylab="response")
}
for(i in 1:12){
drug <- ALLRES[i]$drug
dset <- ALLRES[i]$dataset
arm <- ALLRES[i]$armcol
if(dset == "PRISM"){
mat <- prsm_new
}else if(dset == "CTRP"){
mat <- ctrp_new
}else if(dset == "GDSC"){
mat <- gdsc_new2
}
common_samples <- intersect(colnames(chrarm_data),colnames(mat))
dd <- na.omit(cbind(chrarm_data[arm,common_samples],mat[drug,common_samples]))
ldat<-list(
loss=dd[which(dd[,1] <= -0.3),2],
neutr=dd[intersect(which(dd[,1] > -0.3),which(dd[,1] < 0.3)),2],
gain=dd[which(dd[,1] >= 0.3),2])
kt <- kruskal.test(ldat)
vioplot(ldat,las=1,col=c("lightblue","grey","salmon"))
mtext(side=3,paste(dset,drug,arm,sep="::"))
legend("bottomleft",sprintf("%.2e",kt$p.value) )
#plot(dd[,1],dd[,2],xlab="10q_CNV",ylab="response")
}
for(i in 1:12){
drug <- ALLRES[i]$drug
dset <- ALLRES[i]$dataset
arm <- ALLRES[i]$armcol
if(dset == "PRISM"){
mat <- prsm_new
}else if(dset == "CTRP"){
mat <- ctrp_new
}else if(dset == "GDSC"){
mat <- gdsc_new2
}
common_samples <- intersect(colnames(chrarm_data),colnames(mat))
dd <- na.omit(cbind(chrarm_data[arm,common_samples],mat[drug,common_samples]))
ldat<-list(
loss=dd[which(dd[,1] <= -0.3),2],
neutr=dd[intersect(which(dd[,1] > -0.3),which(dd[,1] < 0.3)),2],
gain=dd[which(dd[,1] >= 0.3),2])
kt <- kruskal.test(ldat)
vioplot(ldat,las=1,col=c("lightblue","grey","salmon"),
labels=c(paste("Loss",length(ldat$loss),sep=":"),paste("Neutral",length(ldat$neutr),sep=":"),paste("Gain",length(ldat$gain),sep=":") ) )
mtext(side=3,paste(dset,drug,arm,sep="::"))
legend("bottomleft",sprintf("%.2e",kt$p.value) )
#plot(dd[,1],dd[,2],xlab="10q_CNV",ylab="response")
}
c(paste("Loss",length(ldat$loss),sep=":"),
paste("Neutral",length(ldat$neutr),sep=":"),
paste("Gain",length(ldat$gain),sep=":") )
for(i in 1:12){
drug <- ALLRES[i]$drug
dset <- ALLRES[i]$dataset
arm <- ALLRES[i]$armcol
if(dset == "PRISM"){
mat <- prsm_new
}else if(dset == "CTRP"){
mat <- ctrp_new
}else if(dset == "GDSC"){
mat <- gdsc_new2
}
common_samples <- intersect(colnames(chrarm_data),colnames(mat))
dd <- na.omit(cbind(chrarm_data[arm,common_samples],mat[drug,common_samples]))
ldat<-list(
loss=dd[which(dd[,1] <= -0.3),2],
neutr=dd[intersect(which(dd[,1] > -0.3),which(dd[,1] < 0.3)),2],
gain=dd[which(dd[,1] >= 0.3),2])
kt <- kruskal.test(ldat)
vioplot(ldat,las=1,col=c("lightblue","grey","salmon"),
names=c(paste("Loss",length(ldat$loss),sep=":"),
paste("Neutral",length(ldat$neutr),sep=":"),
paste("Gain",length(ldat$gain),sep=":") ) )
mtext(side=3,paste(dset,drug,arm,sep="::"))
legend("bottomleft",sprintf("%.2e",kt$p.value) )
#plot(dd[,1],dd[,2],xlab="10q_CNV",ylab="response")
}
dev.off()
dev.off()
plot(ALLRES$rho,-log10(ALLRES$pval),col=ALLRES$pcol,pch=ALLRES$respch)
legend("topleft",c("PRISM","GDSC","CTRP"),pch=c(1,2,3))
plot(ALLRES$rho,-log10(ALLRES$pval),col=ALLRES$pcol,pch=ALLRES$respch,
las=1,xlab="Spearman's rho",ylab=c("-log10(p-value)"))
legend("topleft",c("PRISM","GDSC","CTRP"),pch=c(1,2,3))
pdf("~/Box Sync/projects/SCA/DRUG/scatter_3dsets.pdf",width=5,height=4)
plot(ALLRES$rho,-log10(ALLRES$pval),col=ALLRES$pcol,pch=ALLRES$respch,
las=1,xlab="Spearman's rho",ylab=c("-log10(p-value)"))
legend("topleft",c("PRISM","GDSC","CTRP"),pch=c(1,2,3))
dev.off()
png("~/Box Sync/projects/SCA/DRUG/scatter_3dsets.png",width=500,height=400)
plot(ALLRES$rho,-log10(ALLRES$pval),col=ALLRES$pcol,pch=ALLRES$respch,
las=1,xlab="Spearman's rho",ylab=c("-log10(p-value)"))
legend("topleft",c("PRISM","GDSC","CTRP"),pch=c(1,2,3))
dev.off()
pdf("~/Box Sync/projects/SCA/DRUG/scatter_3dsets.pdf",width=7,height=5)
plot(ALLRES$rho,-log10(ALLRES$pval),col=ALLRES$pcol,pch=ALLRES$respch,
las=1,xlab="Spearman's rho",ylab=c("-log10(p-value)"))
legend("topleft",c("PRISM","GDSC","CTRP"),pch=c(1,2,3))
dev.off()
ALLRES
head(ALLRES)
head(ALLRES,20)
head(ALLRES,30)
write.table(head(ALLRES,30),sep="\t")
write.table(head(ALLRES,30),sep="\t",quote=FALSE)
write.table(head(ALLRES,30),sep="\t",quote=FALSE,row.names=F)
ALLRES$fdr <- p.adjust(ALLRES$pval)
write.table(head(ALLRES,30),sep="\t",quote=FALSE,row.names=F)
write.table(head(ALLRES,30),sep="\t",quote=FALSE,row.names=F)
write.table(head(ALLRES,80),sep="\t",quote=FALSE,row.names=F)
table(ALLRES[i]$drug )
table(ALLRES$drug )
source('~/Box Sync/My_CHOP/git/PANCANCER/ALL_TUMOR_CNV_SV.r')
## ALL DATASETS
rm(list = ls(all.names = TRUE))
.rs.restartR()
ls()
library(svpluscnv)
validate.cnv(nbl_segdat)
cnv <- validate.cnv(nbl_segdat)
cnv
cnv.freq(cnv)
rm(list = ls(all.names = TRUE))
detach("package:svpluscnv", unload=TRUE)
.rs.restartR()
library(devtools)
library(roxygen2)
# install modified package
setwd("~/Box Sync/git/svpluscnv")
document()
setwd("~/Box Sync/git/")
install("svpluscnv")
library(svpluscnv)
?plot.cnvfreq
rm(list = ls(all.names = TRUE))
detach("package:svpluscnv", unload=TRUE)
.rs.restartR()
library(devtools)
library(roxygen2)
# install modified package
setwd("~/Box Sync/git/svpluscnv")
document()
# install modified package
setwd("~/Box Sync/git/svpluscnv")
document()
x
x
# install modified package
setwd("~/Box Sync/git/svpluscnv")
document()
# install modified package
setwd("~/Box Sync/git/svpluscnv")
document()
setwd("~/Box Sync/git/")
install("svpluscnv")
rm(list = ls(all.names = TRUE))
detach("package:svpluscnv", unload=TRUE)
.rs.restartR()
library(devtools)
library(roxygen2)
# install modified package
setwd("~/Box Sync/git/svpluscnv")
document()
setwd("~/Box Sync/git/")
install("svpluscnv")
rm(list = ls(all.names = TRUE))
detach("package:svpluscnv", unload=TRUE)
library(svpluscnv)
rm(list = ls(all.names = TRUE))
detach("package:svpluscnv", unload=TRUE)
.rs.restartR()
library(devtools)
library(roxygen2)
# install modified package
setwd("~/Box Sync/git/svpluscnv")
document()
setwd("~/Box Sync/git/")
install("svpluscnv")
# cp vignettes/svpluscnv_howto.Rmd README.Rmd
library(knitr)
setwd("~/Box Sync/git/svpluscnv")
knit(input="README.Rmd", output = "README.md") #see ?knit for more options
setwd("~/Box Sync/git/svpluscnv/vignettes/")
knit(input="orthogonal_breast_data.Rmd", output = "orthogonal_breast_data.md") #see ?knit for more options
cnv.freq(cnv)
graphics.off()
def.par <- par(no.readonly = TRUE)
library(svpluscnv)
url_brca_ccle <- url("https://github.com/ccbiolab/svpluscnv_doc_code/raw/master/data/brca_ccle.rda")
load(url_brca_ccle,verbose=TRUE)
url_tcga_ccle <- url("https://github.com/ccbiolab/svpluscnv_doc_code/raw/master/data/brca_tcga.rda")
load(url_tcga_ccle,verbose=TRUE)
url_brca_pcawg <- url("https://github.com/ccbiolab/svpluscnv_doc_code/raw/master/data/brca_pcawg.rda")
load(url_brca_pcawg,verbose=TRUE)
par(mfrow=c(3,1),mar=c(3,4,1,4))
a <- cnv.freq(cnv_brca_ccle,fc.pct = 0.3, ploidy = TRUE,verbose=FALSE)
title("A", adj = 0, line = 0, cex=2)
b <- cnv.freq(cnv_brca_tcga,fc.pct = 0.3, ploidy = TRUE,verbose=FALSE)
title("B", adj = 0, line = 0, cex=2)
c <- cnv.freq(cnv_brca_pcawg,fc.pct = 0.3, ploidy = TRUE,verbose=FALSE)
title("C", adj = 0, line = 0, cex=2)
desv.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
par(mfrow=c(3,1),mar=c(3,4,1,4))
a <- cnv.freq(cnv_brca_ccle,fc.pct = 0.3, ploidy = TRUE,verbose=FALSE)
title("A", adj = 0, line = 0, cex=2)
b <- cnv.freq(cnv_brca_tcga,fc.pct = 0.3, ploidy = TRUE,verbose=FALSE)
title("B", adj = 0, line = 0, cex=2)
c <- cnv.freq(cnv_brca_pcawg,fc.pct = 0.3, ploidy = TRUE,verbose=FALSE)
title("C", adj = 0, line = 0, cex=2)
# load a list of cancer genes (cosmic cancer census release v90)
url_cosmic_census <- url("https://github.com/ccbiolab/svpluscnv_doc_code/raw/master/data/cosmic_census_v90.rda")
load(url_cosmic_census,verbose=TRUE)
## Identification of breakpoints overlapping known genes; for CCLE we use bothe CNV and SV and intersect the results
cnv_annot_ccle <- cnv.break.annot(cnv_brca_ccle,
fc.pct = 0,
genome.v="hg19",
clean.brk = 8,
verbose=FALSE)
svc_annot_ccle <- svc.break.annot(svc_brca_ccle,
svc.seg.size = 200000,
genome.v="hg19",
verbose=FALSE)
disruptSamplesCCLE <- merge2lists(cnv_annot_ccle@disruptSamples,svc_annot_ccle@disruptSamples, fun="intersect")
disruptSamplesCCLE_cosmic <- disruptSamplesCCLE[intersect(names(disruptSamplesCCLE),cosmic_cancer_census_v90$Gene.Symbol)]
ccle_plot_genes <- rev(sort(unlist(lapply(disruptSamplesCCLE_cosmic,length)),decreasing=TRUE)[1:20])
cnv_annot_tcga <- cnv.break.annot(cnv_brca_tcga,
fc.pct = 0,
genome.v="hg19",
clean.brk = 8,
verbose=FALSE)
disruptSamplesTCGA <- cnv_annot_tcga@disruptSamples
disruptSamplesTCGA_cosmic <- disruptSamplesTCGA[intersect(names(disruptSamplesTCGA),cosmic_cancer_census_v90$Gene.Symbol)]
tcga_plot_genes <- rev(sort(unlist(lapply(disruptSamplesTCGA_cosmic,length)),decreasing=TRUE)[1:20])
cnv_annot_pcawg <- cnv.break.annot(cnv_brca_pcawg,
fc.pct = 0,
genome.v="hg19",
clean.brk = 8,
verbose=FALSE)
svc_annot_pcawg <- svc.break.annot(svc_brca_pcawg,
svc.seg.size = 200000,
genome.v="hg19",
verbose=FALSE)
disruptSamplesPCAWG <- merge2lists(cnv_annot_pcawg@disruptSamples, svc_annot_pcawg@disruptSamples, fun="intersect")
disruptSamplesPCAWG_cosmic <- disruptSamplesPCAWG[intersect(names(disruptSamplesPCAWG),cosmic_cancer_census_v90$Gene.Symbol)]
pcawg_plot_genes <- rev(sort(unlist(lapply(disruptSamplesPCAWG_cosmic,length)),decreasing=TRUE)[1:20])
gene <- "FHIT"
df <- gene.track.view(symbol = gene, plot=FALSE, genome.v = "hg19")@data
start <- min(df$txStart) - 50000;  stop <- max(df$txEnd) + 300000;  chr <- df$chrom[1]
gene_samples <- sort(disruptSamplesCCLE[[gene]])
# Obtain genes in the top 20 in two datasets
repl2 <- names(which(sort(table(c(names(ccle_plot_genes),names(tcga_plot_genes),names(pcawg_plot_genes)))) == 2))
# Obtain genes in the top 20 in three datasets
repl3 <- names(which(sort(table(c(names(ccle_plot_genes),names(tcga_plot_genes),names(pcawg_plot_genes)))) == 3))
# Create a gene color vector for each dataset based on replication across datasets
ccle_color <- tcga_color <- pcawg_color <- rep("grey",20)
names(ccle_color) <- names(ccle_plot_genes)
names(tcga_color) <- names(tcga_plot_genes)
names(pcawg_color) <- names(pcawg_plot_genes)
ccle_color[repl2] <- "lightblue"; ccle_color[repl3] <- "blue";
tcga_color[repl2] <- "lightblue"; tcga_color[repl3] <- "blue"
pcawg_color[repl2] <- "lightblue"; pcawg_color[repl3] <- "blue"
layout(matrix(c(1,2,3,4,4,4,5,5,5),3,3,
byrow = TRUE),heights = c(5.5,4.5,3.5))
par(mar=c(4,5,1,1))
barplot(ccle_plot_genes,
horiz=TRUE,las=1,cex.names = 1, xlab="#CCLE samples",
col=ccle_color,border="NA")
title("A", adj = 0, line = 0, cex=2)
barplot(tcga_plot_genes,
horiz=TRUE,las=1,cex.names = 1, xlab="#TCGA samples",
col=tcga_color,border="NA")
title("B", adj = 0, line = 0, cex=2)
barplot(pcawg_plot_genes,
horiz=TRUE,las=1,cex.names = 1, xlab="#PCAWG samples",
col=pcawg_color,border="NA")
title("C", adj = 0, line = 0, cex=2)
par(mar=c(1,10,0,1))
sv.model.view(cnv_brca_ccle,svc_brca_ccle, chr, start, stop, sampleids=gene_samples,
addlegend = 'both', addtext=c("TRA"), cnvlim = c(-2,2),
cex=.7,cex.text =.8, summary = FALSE,cex.legend = 0.7)
title("D", adj = 0, line = -2, cex=1.5)
par(mar=c(3,10,1,1))
gene.track.view(chr=chr ,start=start, stop=stop, addtext=TRUE, cex.text=1,
summary = FALSE,cex=2)
par(def.par)
#### Figure SUPPL S3
# collect breakpoints for CNV and SVC
cnv_breaks_ccle <- cnv.breaks(cnv_brca_ccle)
svc_breaks_ccle <- svc.breaks(svc_brca_ccle)
# match both breakpoint sources and plot
par(mar=c(5,5,2,2))
res <- match.breaks(cnv_breaks_ccle,svc_breaks_ccle, maxgap = 10000)
title("A", adj = 0, line = 0, cex=2)
title("B", adj = 0, line = -25, cex=2)
par(def.par)
shreg_ccle <- shattered.regions(cnv_brca_ccle,svc_brca_ccle,
fc.pct = 0.1, interleaved.cut = 0.33, verbose=FALSE)
shreg_tcga <- shattered.regions.cnv(cnv_brca_ccle,
fc.pct = 0.1, verbose=FALSE)
shreg_pcawg <- shattered.regions(cnv_brca_pcawg,svc_brca_pcawg,
fc.pct = 0.1, interleaved.cut = 0.33, verbose=FALSE)
set.seed=1234
# evaluate hotspots and plot shattered region maps for each dataset
layout(matrix(c(1,2,3,4,5,6),3,2,
byrow = TRUE),widths = c(2,6))
par(mar=c(4,4,3,1))
fpt_ccle <- freq.p.test(shreg_ccle@high.density.regions.hc)
title("A", adj = 0, line = 1, cex=2)
par(mar=c(3,4,3,4))
shattered.map.plot(shreg_ccle,freq.cut = fpt_ccle@freq.cut)
text(4e8,fpt_ccle@freq.cut+0.5,"fdr < 0.05",cex=1.1)
title("B", adj = 0, line = 1, cex=2)
par(mar=c(4,4,3,1))
fpt_tcga <- freq.p.test(shreg_tcga@high.density.regions.hc)
title("C", adj = 0, line = 1, cex=2)
par(mar=c(3,4,3,4))
shattered.map.plot(shreg_tcga,freq.cut = fpt_tcga@freq.cut)
text(4e8,fpt_tcga@freq.cut+0.6,"fdr < 0.05",cex=1.1)
title("D", adj = 0, line = 1, cex=2)
par(mar=c(4,4,3,1))
fpt_pcawg <- freq.p.test(shreg_pcawg@high.density.regions.hc)
title("E", adj = 0, line = 1, cex=2)
par(mar=c(3,4,3,4))
shattered.map.plot(shreg_pcawg,freq.cut = fpt_pcawg@freq.cut)
text(4e8,fpt_pcawg@freq.cut+1,"fdr < 0.05",cex=1.1)
title("F", adj = 0, line = 1, cex=2)
par(def.par)
graphics.off()
def.par <- par(no.readonly = TRUE)
BiocStyle::markdown()
cnv <- validate.cnv(nbl_segdat)
svc <- validate.svc(nbl_svdat)
cnv_freq <- cnv.freq(cnv, fc.pct = 0.2, ploidy = FALSE, plot=TRUE)
cnv_freq <- cnv.freq(cnv, fc.pct = 0.2, ploidy = FALSE)
charm.mat <- chr.arm.cnv(cnv, genome.v = "hg19", verbose = FALSE)
# heatmap plot of chromosome arm level CNV
require(gplots,quietly = TRUE,warn.conflicts = FALSE)
heatmap.2(charm.mat[order(rownames(charm.mat))[1:42],],Rowv=NA,trace='none',cexCol=.5, lhei=c(0.25,1), dendrogram='col', key.title="Copy number",
col=colorRampPalette(c("blue","white","red"))(256))
pct_change <- pct.genome.changed(cnv, fc.pct = 0.2)
svc_breaks  <- svc.breaks(svc)
# define breakpoints from cnv data based on certain CNV log-ratio change cutoff
cnv_breaks  <- cnv.breaks(cnv,fc.pct = 0.2,verbose=FALSE)
# scatter plot comparing cnv and svc breakpoint burden and percent genome changed, for a set of common samples
common_samples <- intersect(names(svc_breaks@burden),names(cnv_breaks@burden))
dat1 <- log2(1+cbind(svc_breaks@burden[common_samples],
cnv_breaks@burden[common_samples]))
dat2 <- log2(1+cbind(pct_change,
cnv_breaks@burden[names(pct_change)]))
par(mfrow=c(1,2))
plot(dat1, xlab="log2(1+SV break count)", ylab="log2(1+CNV break count)")
legend("bottomright",paste("Spearman's cor=",sprintf("%.2f",cor(dat1,method="spearman")[1,2]), sep=""))
plot(dat2, xlab="percentage genome changed", ylab="log2(1+CNV break count)")
legend("bottomright",paste("Spearman's cor=",sprintf("%.2f",cor(dat2,method="spearman")[1,2]), sep=""))
svc_breaks  <- svc.breaks(svc)
# define breakpoints from cnv data based on certain CNV log-ratio change cutoff
cnv_breaks  <- cnv.breaks(cnv,fc.pct = 0.2,verbose=FALSE)
# scatter plot comparing cnv and svc breakpoint burden and percent genome changed, for a set of common samples
common_samples <- intersect(names(svc_breaks@burden),names(cnv_breaks@burden))
dat1 <- log2(1+cbind(svc_breaks@burden[common_samples],
cnv_breaks@burden[common_samples]))
dat2 <- log2(1+cbind(pct_change,
cnv_breaks@burden[names(pct_change)]))
par(mfrow=c(1,2))
plot(dat1, xlab="log2(1+SV break count)", ylab="log2(1+CNV break count)")
legend("bottomright",paste("Spearman's cor=",sprintf("%.2f",cor(dat1,method="spearman")[1,2]), sep=""))
plot(dat2, xlab="percentage genome changed", ylab="log2(1+CNV break count)")
legend("bottomright",paste("Spearman's cor=",sprintf("%.2f",cor(dat2,method="spearman")[1,2]), sep=""))
par(def.par)
common.breaks <- match.breaks(cnv_breaks, svc_breaks,
maxgap=100000,
verbose=FALSE,
plot = TRUE)
library(taRifx)
segdat_lung_ccle <- remove.factors(segdat_lung_ccle)
svdat_lung_ccle <- remove.factors(svdat_lung_ccle)
cnv <- validate.cnv(segdat_lung_ccle)
# remove likely artifacts from segmentation data and fill gaps in the segmentation data (optional)
cnv_clean <- clean.cnv.artifact(cnv, verbose=FALSE,n.reps = 4,fill.gaps = TRUE)
svc <- validate.svc(svdat_lung_ccle)
shatt_lung <- shattered.regions(cnv, svc, fc.pct = 0.1, verbose=FALSE)
shatt_lung
shatt_lung_cnv <- shattered.regions.cnv(cnv_clean, fc.pct = 0.1, verbose=FALSE)
shatt_lung_cnv
par(mfrow=c(1,3))
circ.wg.plot(cnv,svc,sample.id = "SCLC21H_LUNG")
circ.chromo.plot(shatt_lung_cnv,sample.id = "SCLC21H_LUNG")
circ.chromo.plot(shatt_lung,sample.id = "SCLC21H_LUNG")
par(def.par)
set.seed<-1234
null.test <- freq.p.test(shatt_lung@high.density.regions.hc,
method="fdr", p.cut = 0.05)
shattered.map.plot(shatt_lung, freq.cut = null.test@freq.cut)
hotspots <- hot.spot.samples(shatt_lung, freq.cut=null.test@freq.cut)
hotspots$peakRegions
genecnv_data <- gene.cnv(cnv_clean, genome.v = "hg19",fill.gaps = FALSE,verbose=FALSE)
# retrieve amplifications and deep deletion events using a log-ratio cutoff = +- 2
amp_del_genes <- amp.del(genecnv_data, logr.cut = 2)
par(mfrow=c(1,2),mar=c(4,7,1,1))
barplot(amp_del_genes$amplified.rank[1:20],col="red",
las=1,main="Amplified genes",horiz=TRUE,xlab="#samples")
barplot(amp_del_genes$deepdel.rank[1:20],col="blue",
las=1,main="Candidate homozigously deleted genes",horiz=TRUE,xlab="#samples")
par(def.par)
''
results_cnv <- cnv.break.annot(cnv, fc.pct = 0.2, genome.v="hg19",clean.brk = 8,upstr = 100000,verbose=FALSE)
results_svc <- svc.break.annot(svc, svc.seg.size = 200000, genome.v="hg19",upstr = 100000, verbose=FALSE)
disruptSamples <- merge2lists(results_cnv@disruptSamples,results_svc@disruptSamples, fun="intersect")
upstreamSamples <- merge2lists(results_cnv@upstreamSamples,results_svc@upstreamSamples, fun="intersect")
# plot a ranking of recurrently altered genes
par(mar=c(5,10,1,1),mfrow=c(1,2))
barplot(rev(sort(unlist(lapply(disruptSamples,length)),decreasing=TRUE)[1:20]),horiz=TRUE,las=1)
barplot(rev(sort(unlist(lapply(upstreamSamples,length)),decreasing=TRUE)[1:20]),horiz=TRUE,las=1)
par(def.par)
refSeqGene <- gene.symbol.info(refseq_hg19,"PTPRD")
chrom <- refSeqGene$chrom
start <- refSeqGene$start - 150000
stop <- refSeqGene$stop + 50000
#  The function `sv.model.view` has builtin breakpoint search capabilities.
# The argument 'sampleids' allows selecting the list of samples to be show; if null,
# samples with breakpoints will be searched in the defined genomic region
# In this case we are using the list of samples with SV breakpoints disrupting PTPRD as determined with `svc.break.annot`
sampleids <- sort(results_svc@disruptSamples[["PTPRD"]])
# We build a layout to combine `svc.model.view` and `gene.track.view` using the same set of genomic coordinates
layout(matrix(c(1,1,2,2),2,2 ,byrow = TRUE),heights = c(8,2))
par(mar=c(0,10,1,1))
sv.model.view(cnv, svc, chrom, start, stop, sampleids=sampleids,
addlegend = 'both', addtext=c("TRA"), cnvlim = c(-2,2),
cex=.7,cex.text =.8, summary = FALSE)
gene.track.view(chrom=chrom ,start=start, stop=stop, addtext=TRUE, cex.text=1,
summary = FALSE)
par(def.par)
refSeqGene <- gene.symbol.info(refseq_hg19,"PTPRD")
chrom <- refSeqGene$chrom
start <- refSeqGene$start - 150000
stop <- refSeqGene$stop + 50000
#  The function `sv.model.view` has builtin breakpoint search capabilities.
# The argument 'sampleids' allows selecting the list of samples to be show; if null,
# samples with breakpoints will be searched in the defined genomic region
# In this case we are using the list of samples with SV breakpoints disrupting PTPRD as determined with `svc.break.annot`
sampleids <- sort(results_svc@disruptSamples[["PTPRD"]])
# We build a layout to combine `svc.model.view` and `gene.track.view` using the same set of genomic coordinates
layout(matrix(c(1,1,2,2),2,2 ,byrow = TRUE),heights = c(8,2))
par(mar=c(0,10,1,1))
sv.model.view(cnv, svc, chrom, start, stop, sampleids=sampleids,
addlegend = 'both', addtext=c("TRA"), cnvlim = c(-2,2),
cex=.7,cex.text =.8, summary = FALSE)
gene.track.view(chrom=chrom ,start=start, stop=stop, addtext=TRUE, cex.text=1,
summary = FALSE)
par(def.par)
# cp vignettes/svpluscnv_howto.Rmd README.Rmd
library(knitr)
setwd("~/Box Sync/git/svpluscnv")
knit(input="README.Rmd", output = "README.md") #see ?knit for more options
setwd("~/Box Sync/git/svpluscnv/vignettes/")
knit(input="orthogonal_breast_data.Rmd", output = "orthogonal_breast_data.md") #see ?knit for more options
library(knitr)
setwd("~/Box Sync/git/svpluscnv")
knit(input="README.Rmd", output = "README.md") #see ?knit for more options
setwd("~/Box Sync/git/svpluscnv/vignettes/")
knit(input="orthogonal_breast_data.Rmd", output = "orthogonal_breast_data.md") #see ?knit for more options
